use hw1;

drop table if exists group_REQUESTS, FRIEND_requests, preferences,sales, advertisements, comments, posts, messages, pages, members, groups, employees, customers, users;

CREATE TABLE USERS(
	UserId INTEGER AUTO_INCREMENT,
	FirstName VARCHAR(16),
	LastName VARCHAR(16),
	Email VARCHAR(32),
    Pass VARCHAR(16),
	PhoneNum VARCHAR(10),
	Street VARCHAR(32),
	City VARCHAR(20),
	ZipCode INTEGER,
	State VARCHAR(2),
	Country VARCHAR(16),
    SignedIn BOOL,
    IsEmployee BOOL,
	PRIMARY KEY(UserId, Email),
	CHECK(PhoneNum >= 0000000000 AND PhoneNum <= 9999999999)
);
CREATE TABLE ACCOUNTS(
	AccountId INTEGER AUTO_INCREMENT,
	CustomerId INTEGER NOT NULL,
	DateCreated DATETIME,
	CreditCardNum VARCHAR(16),
	PRIMARY KEY(AccountId),
	FOREIGN KEY(CustomerId) REFERENCES USERS(UserId) ON DELETE CASCADE,
	CHECK(CreditCardNum <= 0000000000000000 AND CreditCardNum <= 9999999999999999)
);
CREATE TABLE EMPLOYEES(
	EmployeeId INTEGER,
	Social INTEGER,
	StartDate DATE,
	HourlyWage DOUBLE,
    IsManager BOOL,
	PRIMARY KEY(EmployeeId),
	FOREIGN KEY(EmployeeId) REFERENCES USERS(UserId) ON DELETE CASCADE,
	CHECK(Social >= 000000000 AND Social <= 999999999)
);
CREATE TABLE GROUPS(
	GroupId INTEGER auto_increment,
	OwnerId INTEGER NOT NULL,
	GroupName VARCHAR(20),
	PRIMARY KEY(GroupId),
	FOREIGN KEY(OwnerId) REFERENCES USERS(UserId) ON DELETE CASCADE
);
CREATE TABLE MEMBERS(
	GroupId INTEGER,
	UserId INTEGER,
	PRIMARY KEY(GroupId, UserId),
	FOREIGN KEY(GroupId) REFERENCES GROUPS(GroupId) ON DELETE CASCADE,
	FOREIGN KEY(UserId) REFERENCES USERS(UserId) ON DELETE CASCADE
);
CREATE TABLE PAGES(
	PageId INTEGER auto_increment,
	UserId INTEGER,
	GroupId INTEGER,
	PostCount INTEGER,
	PRIMARY KEY(PageId),
	FOREIGN KEY(UserId) REFERENCES USERS(UserId) ON DELETE CASCADE,
	FOREIGN KEY(GroupId) REFERENCES GROUPS(GroupId) ON DELETE CASCADE,
	CHECK(NOT(GroupId IS NULL AND UserId IS NULL)),
	CHECK(GroupId IS NULL OR UserId IS NULL)
);
CREATE TABLE MESSAGES(
	MessageId INTEGER auto_increment,
	SenderId INTEGER NOT NULL,
	ReceiverId INTEGER NOT NULL,
	DateSent DATETIME,
	MsgSubject VARCHAR(16),
	Content VARCHAR(255),
	PRIMARY KEY(MessageId),
	FOREIGN KEY(SenderId) REFERENCES USERS(UserId) ON DELETE CASCADE,
	FOREIGN KEY(ReceiverId) REFERENCES USERS(UserId) ON DELETE CASCADE
);
CREATE TABLE POSTS(
	PostId INTEGER auto_increment,
	PageId INTEGER NOT NULL,
	AuthorId INTEGER NOT NULL,
	Content VARCHAR(255),
	CommentCount INTEGER,
	LikeCount INTEGER,
	DateCreated DATETIME,
	PRIMARY KEY(PostId),
	FOREIGN KEY(PageId) REFERENCES PAGES(PageId) ON DELETE CASCADE,
	FOREIGN KEY(AuthorId) REFERENCES USERS(UserId) ON DELETE CASCADE
);
CREATE TABLE COMMENTS(
	CommentId INTEGER auto_increment,
	PostId INTEGER NOT NULL,
	AuthorId INTEGER NOT NULL,
	Content VARCHAR(255),
	DateCreated DATETIME,
	LikeCount INTEGER,
	PRIMARY KEY(CommentId),
	FOREIGN KEY(PostId) REFERENCES POSTS(PostId) ON DELETE CASCADE,
	FOREIGN KEY(AuthorId) REFERENCES USERS(UserId) ON DELETE CASCADE
);
CREATE TABLE ADVERTISEMENTS(
	AdvertisementId INTEGER auto_increment,
	EmployeeId INTEGER NOT NULL,
	ItemType VARCHAR(20),
	DateCreated DATETIME,
	Company VARCHAR(20),
	ItemName VARCHAR(20),
	Content VARCHAR(255),
	UnitPrice DOUBLE,
	NumAvailable INTEGER,
	PRIMARY KEY(AdvertisementId),
	FOREIGN KEY(EmployeeId) REFERENCES EMPLOYEES(EmployeeId) ON DELETE CASCADE
);

CREATE TABLE PREFERENCES(
	UserId INTEGER,
    Preference VARCHAR(20),
    PRIMARY KEY(UserId, Preference),
    FOREIGN KEY(UserId) REFERENCES USERS(UserId) ON DELETE CASCADE
);

CREATE TABLE SALES(
	SaleId INTEGER auto_increment,
	AdvertisementId INTEGER NOT NULL,
	AccountId INTEGER NOT NULL,
	NumUnits INTEGER,
	SaleDate DATETIME,
	PRIMARY KEY(SaleId),
	FOREIGN KEY(AdvertisementId) REFERENCES ADVERTISEMENTS(AdvertisementId) ON DELETE CASCADE,
	FOREIGN KEY(AccountId) REFERENCES ACCOUNTS(AccountId) ON DELETE CASCADE
);

CREATE TABLE FRIEND_REQUESTS(
	RequesterId INTEGER,
    RecipientId INTEGER,
    PRIMARY KEY(RequesterId, RecipientId),
    FOREIGN KEY(RequesterId) REFERENCES USERS(UserId) ON DELETE CASCADE,
    FOREIGN KEY(RecipientId) REFERENCES USERS(UserId) ON DELETE CASCADE
 );
 
 CREATE TABLE GROUP_REQUESTS(
	NewMemberId INTEGER,
    GroupId INTEGER,
    PRIMARY KEY(NewMemberId, GroupId),
    FOREIGN KEY(NewMemberId) REFERENCES USERS(UserId) ON DELETE CASCADE,
    FOREIGN KEY(GroupId) REFERENCES GROUPS(GroupId) ON DELETE CASCADE
 );
 
 
 
 
 